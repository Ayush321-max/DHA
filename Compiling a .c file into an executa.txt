Compiling a .c file into an executable .exe file involves several steps, typically performed using a compiler like GCC on a Unix-like system. Here, I'll guide you through the process step-by-step using terminal commands on a Unix-based system (like Linux).

Step 1: Write a C Program
Let's create a simple C program. Open your terminal and create a file named hello.c with the following content:

c

// hello.c
#include <stdio.h>

int main() {
    printf("Hello, world!\n");
    return 0;
}
Save the file in your current directory.

Step 2: Compile the C Program
Now, let's compile hello.c into an executable. Open your terminal and execute the following command:

bash

gcc hello.c -o hello
Explanation:

gcc: This is the GNU Compiler Collection command for compiling C programs.
hello.c: This is the source file we want to compile.
-o hello: This option specifies the output file name for the executable. Here, we're naming it hello.
Step 3: Verify the Compilation
After running the gcc command, if there are no errors, you should see the hello executable file in your current directory.

Step 4: Run the Executable
To verify that the compilation was successful, run the executable:

bash

./hello
This should output:
Hello, world!
Step 5: Optional - View Compiled Machine Code (Assembly)
Optionally, you can view the assembly code generated by the compiler. This step requires the objdump utility which is typically installed along with GCC:

bash

objdump -d hello
This command disassembles the hello executable, showing its assembly instructions.

Summary Verification
Compilation: The gcc command compiles hello.c into an executable hello.
Execution: Running ./hello executes the program, producing the expected output.
Optional - Assembly Code: objdump -d hello shows the assembly instructions generated by the compiler.


By following these steps, you can compile a .c file into an executable .exe file on a Unix-like system using terminal commands.



